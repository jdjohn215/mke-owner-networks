name: Update parcel data and networks

on:
  workflow_dispatch:
  schedule:
    - cron:  '0 1 * * *' # daily, 1AM UTC / 7PM CST

env:
  GEOCODIO_API_KEY: ${{ secrets.GEOCODIO_API_KEY_SECRET }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  update-networks:
    runs-on: ubuntu-latest
    # it should take <10 minutes, but reinstalling the cache can take longer
    timeout-minutes: 60
    
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    steps:
      - name: Set up R
        uses: r-lib/actions/setup-r@v2

      - name: Install packages
        uses: r-lib/actions/setup-r-dependencies@v2 # automatically sets up cache
        with:
          packages: |
            any::tidyverse 
            any::igraph
            any::tidygraph
            any::ggraph
            any::stringi
            any::tidygeocoder
            any::svglite

      - name: Check out repository
        uses: actions/checkout@v3

      - name: fetch MPROP
        run: Rscript -e 'source("processing-scripts/fetch-mprop.R")'
      - name: standardize MPROP addresses
        run: Rscript -e 'source("processing-scripts/mprop-standardize-addresses.R")'
      - name: subset WDFI
        run: Rscript -e 'source("processing-scripts/subset-wdfi-in-mprop.R")'
      - name: standardize WDFI address
        run: Rscript -e 'source("processing-scripts/wdfi-standardize-addresses.R")'
      - name: igraph owner networks
        run: Rscript -e 'source("processing-scripts/identify-owner-networks.R")'
      - name: update new graph SVGs
        run: Rscript -e 'source("processing-scripts/update-network-graph-svgs.R")'

      - name: Commit results
        # Commit all changed files back to the repository
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: Data updates

  deploy:
    name: Deploy app
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: cp ../data/LandlordProperties-with-OwnerNetworks.csv data/LandlordProperties-with-OwnerNetworks.csv
        working-directory: who_owns_what
      - run: flyctl deploy --remote-only
        working-directory: who_owns_what
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
